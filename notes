import com.eviware.soapui.support.XmlHolder

//def groovyUtils = new com.eviware.soapui.GroovyUtils(context)
def holder = new XmlHolder(messageExchange.responseContentAsXml)
holder.declareNamespace("ns1","http://tempuri.org/")
 
//def addResult = holder.getDomNode("ns1:AddResult")
 
def addResult = holder.getNodeValue("//ns1:AddResult")
 
log.info "Result is :" + addResult
 
if(addResult=="48")
{
    log.info "Pass"
}
else
{
    log.info "Fail"
}
////////////////////////////////////////////////////////////////////////////////////
import com.eviware.soapui.support.XmlHolder

respXmlHolder = new XmlHolder(messageExchange.getResponseContentAsXml())
respXmlHolder.declareNamespace("ns1","http://tempuri.org/")
CDATAXml = respXmlHolder.getNodeValue("//ns1:AddResult")
log.info "Result is :" + CDATAXml
if(CDATAXml=="48.0")
{
    log.info "Pass"
}
else
{
    log.info "Fail"
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////


def groovyUtils = new com.eviware.soapui.GroovyUtils(context)
def holder =groovyUtils.getXmlHolder(messageExchange.responseContent)
 
holder.namespace("ns1") = "http://tempuri.org/"
 
def addResult = holdr.getNodavalue("ns1:AddResult")
 
log.info "Result is :" + addResult
 
if(addResult=="48")
{
    log.info "Pass"
}
else
{
    log.info "Fail"
}

///////////////////////////////////////////////////////////////
<dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>
/////////////////////////////////////////////////////
@Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.any())
                .paths(PathSelectors.any())
                .build();
    }



//////////////////////////////////////////////////////////
Product emp= jdbcTemplate.queryForObject(selectSQL,new Object[] {productID}, new BeanPropertyRowMapper<>(Product.class));

/////////////////////////////////////////////////////////////
application properties


server.port=9090


spring.datasource.driverClass=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/boot_camp_db
spring.datasource.username=root
spring.datasource.password=root



/////////////////////////////////////////////////////////////
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"

    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/sche<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"

    xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">ma/context/spring-context.xsd">

 <context:annotation-config />
    <context:component-scan base-package="com.shad"></context:component-scan>


//spring-framwork
<dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
            <version>2.3.1</version>
            <scope>provided</scope>
        </dependency>
 
        <dependency>
            <groupId>jstl</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>


///styling dashboard.html
<style type="text/css">
table {
    border: 1px solid green;
    width: 60%;
    margin-left: 20%;
    border-collapse: collapse;
}
 
td, th {
    border: 1px solid green;
    text-align: center;
}
 
th {
    background: yellow;
    color: red;
}
 
h1, h4 {
    text-align: center;
}
</style>


//// edit and delete

public void deleteProductById(long id) {
 
        Product tobeDeleted = null;
 
        for (Product productDB : allProducts) {
 
            if (productDB.getId() == id) {
 
                tobeDeleted = productDB;
 
                break;
 
            }
        }
 
        allProducts.remove(tobeDeleted);
 
    }
	
@GetMapping("/deleteProduct/{id}")
    public String deleteProduct(@PathVariable long id) {
 
        productService.deleteProductById(id);
 
        return "redirect:/dashboard";
    }
    
    
<a th:href='@{/editProduct/}+ ${product.id}'>Edit</a> | <a
                th:href='@{/deleteProduct/}+ ${product.id}'>Delete</a></td>
